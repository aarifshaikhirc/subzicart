//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace subzicart.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class subzicartEntities : DbContext
    {
        public subzicartEntities()
            : base("name=subzicartEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<tblBrandPrefix> tblBrandPrefixes { get; set; }
        public virtual DbSet<tblCategory> tblCategories { get; set; }
        public virtual DbSet<tblCompetitorMaster> tblCompetitorMasters { get; set; }
        public virtual DbSet<tblCurrencyMaster> tblCurrencyMasters { get; set; }
        public virtual DbSet<tblFullfillmentDetail> tblFullfillmentDetails { get; set; }
        public virtual DbSet<tblImageLog> tblImageLogs { get; set; }
        public virtual DbSet<tblMeasurementMaster> tblMeasurementMasters { get; set; }
        public virtual DbSet<tblProductAvail> tblProductAvails { get; set; }
        public virtual DbSet<tblProductGP> tblProductGPS { get; set; }
        public virtual DbSet<tblProductMaster> tblProductMasters { get; set; }
        public virtual DbSet<tblSubCategory> tblSubCategories { get; set; }
        public virtual DbSet<tblLogin> tblLogins { get; set; }
        public virtual DbSet<tblPageMenu> tblPageMenus { get; set; }
        public virtual DbSet<tblPageSubMenu> tblPageSubMenus { get; set; }
        public virtual DbSet<tblTransactionLog> tblTransactionLogs { get; set; }
        public virtual DbSet<tblWebpage> tblWebpages { get; set; }
        public virtual DbSet<tblCategoryMaster> tblCategoryMasters { get; set; }
        public virtual DbSet<tblProductMaster_13082020> tblProductMaster_13082020 { get; set; }
    
        public virtual ObjectResult<sp_login_Result> sp_login(string username, string pswd)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var pswdParameter = pswd != null ?
                new ObjectParameter("pswd", pswd) :
                new ObjectParameter("pswd", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_login_Result>("sp_login", usernameParameter, pswdParameter);
        }
    
        public virtual ObjectResult<sp_tblBrandPrefixes_Operations_Result> sp_tblBrandPrefixes_Operations(Nullable<long> brand_id, string brand_name, string brand_prefix, string sku_start_range, string sku_end_range, Nullable<int> active, Nullable<System.DateTime> updDt, Nullable<int> action, Nullable<int> userID, ObjectParameter remark)
        {
            var brand_idParameter = brand_id.HasValue ?
                new ObjectParameter("brand_id", brand_id) :
                new ObjectParameter("brand_id", typeof(long));
    
            var brand_nameParameter = brand_name != null ?
                new ObjectParameter("brand_name", brand_name) :
                new ObjectParameter("brand_name", typeof(string));
    
            var brand_prefixParameter = brand_prefix != null ?
                new ObjectParameter("brand_prefix", brand_prefix) :
                new ObjectParameter("brand_prefix", typeof(string));
    
            var sku_start_rangeParameter = sku_start_range != null ?
                new ObjectParameter("sku_start_range", sku_start_range) :
                new ObjectParameter("sku_start_range", typeof(string));
    
            var sku_end_rangeParameter = sku_end_range != null ?
                new ObjectParameter("sku_end_range", sku_end_range) :
                new ObjectParameter("sku_end_range", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("active", active) :
                new ObjectParameter("active", typeof(int));
    
            var updDtParameter = updDt.HasValue ?
                new ObjectParameter("updDt", updDt) :
                new ObjectParameter("updDt", typeof(System.DateTime));
    
            var actionParameter = action.HasValue ?
                new ObjectParameter("action", action) :
                new ObjectParameter("action", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblBrandPrefixes_Operations_Result>("sp_tblBrandPrefixes_Operations", brand_idParameter, brand_nameParameter, brand_prefixParameter, sku_start_rangeParameter, sku_end_rangeParameter, activeParameter, updDtParameter, actionParameter, userIDParameter, remark);
        }
    
        public virtual ObjectResult<sp_tblBrandPrefixes_Result> sp_tblBrandPrefixes(Nullable<long> brand_id, string brand_name, string brand_prefix, string sku_start_range, string sku_end_range, Nullable<int> active, Nullable<System.DateTime> updDt, Nullable<int> action, Nullable<int> userID, ObjectParameter remark)
        {
            var brand_idParameter = brand_id.HasValue ?
                new ObjectParameter("brand_id", brand_id) :
                new ObjectParameter("brand_id", typeof(long));
    
            var brand_nameParameter = brand_name != null ?
                new ObjectParameter("brand_name", brand_name) :
                new ObjectParameter("brand_name", typeof(string));
    
            var brand_prefixParameter = brand_prefix != null ?
                new ObjectParameter("brand_prefix", brand_prefix) :
                new ObjectParameter("brand_prefix", typeof(string));
    
            var sku_start_rangeParameter = sku_start_range != null ?
                new ObjectParameter("sku_start_range", sku_start_range) :
                new ObjectParameter("sku_start_range", typeof(string));
    
            var sku_end_rangeParameter = sku_end_range != null ?
                new ObjectParameter("sku_end_range", sku_end_range) :
                new ObjectParameter("sku_end_range", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("active", active) :
                new ObjectParameter("active", typeof(int));
    
            var updDtParameter = updDt.HasValue ?
                new ObjectParameter("updDt", updDt) :
                new ObjectParameter("updDt", typeof(System.DateTime));
    
            var actionParameter = action.HasValue ?
                new ObjectParameter("action", action) :
                new ObjectParameter("action", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblBrandPrefixes_Result>("sp_tblBrandPrefixes", brand_idParameter, brand_nameParameter, brand_prefixParameter, sku_start_rangeParameter, sku_end_rangeParameter, activeParameter, updDtParameter, actionParameter, userIDParameter, remark);
        }
    
        public virtual ObjectResult<sp_tblCategory_Result> sp_tblCategory(Nullable<int> catId, string catName, string description, Nullable<int> isActive, Nullable<int> userId, Nullable<System.DateTime> insDt, Nullable<System.DateTime> updDt, Nullable<int> action, ObjectParameter remark)
        {
            var catIdParameter = catId.HasValue ?
                new ObjectParameter("catId", catId) :
                new ObjectParameter("catId", typeof(int));
    
            var catNameParameter = catName != null ?
                new ObjectParameter("catName", catName) :
                new ObjectParameter("catName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var insDtParameter = insDt.HasValue ?
                new ObjectParameter("insDt", insDt) :
                new ObjectParameter("insDt", typeof(System.DateTime));
    
            var updDtParameter = updDt.HasValue ?
                new ObjectParameter("updDt", updDt) :
                new ObjectParameter("updDt", typeof(System.DateTime));
    
            var actionParameter = action.HasValue ?
                new ObjectParameter("action", action) :
                new ObjectParameter("action", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblCategory_Result>("sp_tblCategory", catIdParameter, catNameParameter, descriptionParameter, isActiveParameter, userIdParameter, insDtParameter, updDtParameter, actionParameter, remark);
        }
    
        public virtual ObjectResult<sp_tblCurrencymaster_Result> sp_tblCurrencymaster(Nullable<long> cid, string currency, Nullable<double> value, Nullable<double> rateInUSD, Nullable<System.DateTime> insDt, Nullable<System.DateTime> updDt, Nullable<int> active, Nullable<int> userId, Nullable<int> action, ObjectParameter remark)
        {
            var cidParameter = cid.HasValue ?
                new ObjectParameter("cid", cid) :
                new ObjectParameter("cid", typeof(long));
    
            var currencyParameter = currency != null ?
                new ObjectParameter("currency", currency) :
                new ObjectParameter("currency", typeof(string));
    
            var valueParameter = value.HasValue ?
                new ObjectParameter("value", value) :
                new ObjectParameter("value", typeof(double));
    
            var rateInUSDParameter = rateInUSD.HasValue ?
                new ObjectParameter("rateInUSD", rateInUSD) :
                new ObjectParameter("rateInUSD", typeof(double));
    
            var insDtParameter = insDt.HasValue ?
                new ObjectParameter("insDt", insDt) :
                new ObjectParameter("insDt", typeof(System.DateTime));
    
            var updDtParameter = updDt.HasValue ?
                new ObjectParameter("updDt", updDt) :
                new ObjectParameter("updDt", typeof(System.DateTime));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("active", active) :
                new ObjectParameter("active", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var actionParameter = action.HasValue ?
                new ObjectParameter("action", action) :
                new ObjectParameter("action", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblCurrencymaster_Result>("sp_tblCurrencymaster", cidParameter, currencyParameter, valueParameter, rateInUSDParameter, insDtParameter, updDtParameter, activeParameter, userIdParameter, actionParameter, remark);
        }
    
        public virtual int sp_tblSubSubCategory(Nullable<int> subCatId, Nullable<int> catId, string subcatName, string description, Nullable<int> isActive, Nullable<int> userId, Nullable<System.DateTime> insDt, Nullable<System.DateTime> updDt, Nullable<int> action, ObjectParameter remark)
        {
            var subCatIdParameter = subCatId.HasValue ?
                new ObjectParameter("subCatId", subCatId) :
                new ObjectParameter("subCatId", typeof(int));
    
            var catIdParameter = catId.HasValue ?
                new ObjectParameter("CatId", catId) :
                new ObjectParameter("CatId", typeof(int));
    
            var subcatNameParameter = subcatName != null ?
                new ObjectParameter("subcatName", subcatName) :
                new ObjectParameter("subcatName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var insDtParameter = insDt.HasValue ?
                new ObjectParameter("insDt", insDt) :
                new ObjectParameter("insDt", typeof(System.DateTime));
    
            var updDtParameter = updDt.HasValue ?
                new ObjectParameter("updDt", updDt) :
                new ObjectParameter("updDt", typeof(System.DateTime));
    
            var actionParameter = action.HasValue ?
                new ObjectParameter("action", action) :
                new ObjectParameter("action", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_tblSubSubCategory", subCatIdParameter, catIdParameter, subcatNameParameter, descriptionParameter, isActiveParameter, userIdParameter, insDtParameter, updDtParameter, actionParameter, remark);
        }
    
        public virtual ObjectResult<sp_tblMeasurementMaster_Result> sp_tblMeasurementMaster(Nullable<int> m_id, string unit_type, Nullable<double> unit_value, string eq_unit_type, Nullable<double> eq_unit_value, Nullable<int> active, Nullable<System.DateTime> updDt, Nullable<int> action, Nullable<int> userID, ObjectParameter remark)
        {
            var m_idParameter = m_id.HasValue ?
                new ObjectParameter("m_id", m_id) :
                new ObjectParameter("m_id", typeof(int));
    
            var unit_typeParameter = unit_type != null ?
                new ObjectParameter("unit_type", unit_type) :
                new ObjectParameter("unit_type", typeof(string));
    
            var unit_valueParameter = unit_value.HasValue ?
                new ObjectParameter("unit_value", unit_value) :
                new ObjectParameter("unit_value", typeof(double));
    
            var eq_unit_typeParameter = eq_unit_type != null ?
                new ObjectParameter("eq_unit_type", eq_unit_type) :
                new ObjectParameter("eq_unit_type", typeof(string));
    
            var eq_unit_valueParameter = eq_unit_value.HasValue ?
                new ObjectParameter("eq_unit_value", eq_unit_value) :
                new ObjectParameter("eq_unit_value", typeof(double));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("active", active) :
                new ObjectParameter("active", typeof(int));
    
            var updDtParameter = updDt.HasValue ?
                new ObjectParameter("updDt", updDt) :
                new ObjectParameter("updDt", typeof(System.DateTime));
    
            var actionParameter = action.HasValue ?
                new ObjectParameter("action", action) :
                new ObjectParameter("action", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblMeasurementMaster_Result>("sp_tblMeasurementMaster", m_idParameter, unit_typeParameter, unit_valueParameter, eq_unit_typeParameter, eq_unit_valueParameter, activeParameter, updDtParameter, actionParameter, userIDParameter, remark);
        }
    
        public virtual ObjectResult<sp_tblProductMaster_Result> sp_tblProductMaster(Nullable<int> productId, Nullable<int> catId, string subCatId, string subCatName, Nullable<int> brandId, string productName, string sKU, string aboutProduct, string description, Nullable<int> price, Nullable<int> costPrice, Nullable<int> retailPrice, Nullable<int> salePrice, Nullable<int> action, Nullable<int> userId, ObjectParameter remark)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("productId", productId) :
                new ObjectParameter("productId", typeof(int));
    
            var catIdParameter = catId.HasValue ?
                new ObjectParameter("catId", catId) :
                new ObjectParameter("catId", typeof(int));
    
            var subCatIdParameter = subCatId != null ?
                new ObjectParameter("subCatId", subCatId) :
                new ObjectParameter("subCatId", typeof(string));
    
            var subCatNameParameter = subCatName != null ?
                new ObjectParameter("subCatName", subCatName) :
                new ObjectParameter("subCatName", typeof(string));
    
            var brandIdParameter = brandId.HasValue ?
                new ObjectParameter("brandId", brandId) :
                new ObjectParameter("brandId", typeof(int));
    
            var productNameParameter = productName != null ?
                new ObjectParameter("productName", productName) :
                new ObjectParameter("productName", typeof(string));
    
            var sKUParameter = sKU != null ?
                new ObjectParameter("SKU", sKU) :
                new ObjectParameter("SKU", typeof(string));
    
            var aboutProductParameter = aboutProduct != null ?
                new ObjectParameter("aboutProduct", aboutProduct) :
                new ObjectParameter("aboutProduct", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(int));
    
            var costPriceParameter = costPrice.HasValue ?
                new ObjectParameter("costPrice", costPrice) :
                new ObjectParameter("costPrice", typeof(int));
    
            var retailPriceParameter = retailPrice.HasValue ?
                new ObjectParameter("retailPrice", retailPrice) :
                new ObjectParameter("retailPrice", typeof(int));
    
            var salePriceParameter = salePrice.HasValue ?
                new ObjectParameter("salePrice", salePrice) :
                new ObjectParameter("salePrice", typeof(int));
    
            var actionParameter = action.HasValue ?
                new ObjectParameter("action", action) :
                new ObjectParameter("action", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblProductMaster_Result>("sp_tblProductMaster", productIdParameter, catIdParameter, subCatIdParameter, subCatNameParameter, brandIdParameter, productNameParameter, sKUParameter, aboutProductParameter, descriptionParameter, priceParameter, costPriceParameter, retailPriceParameter, salePriceParameter, actionParameter, userIdParameter, remark);
        }
    
        public virtual ObjectResult<sp_tblSubCategory_Result> sp_tblSubCategory(Nullable<int> subCatId, Nullable<int> catId, string subcatName, string description, Nullable<int> isActive, Nullable<int> userId, Nullable<System.DateTime> insDt, Nullable<System.DateTime> updDt, Nullable<int> action, ObjectParameter remark)
        {
            var subCatIdParameter = subCatId.HasValue ?
                new ObjectParameter("subCatId", subCatId) :
                new ObjectParameter("subCatId", typeof(int));
    
            var catIdParameter = catId.HasValue ?
                new ObjectParameter("CatId", catId) :
                new ObjectParameter("CatId", typeof(int));
    
            var subcatNameParameter = subcatName != null ?
                new ObjectParameter("subcatName", subcatName) :
                new ObjectParameter("subcatName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var insDtParameter = insDt.HasValue ?
                new ObjectParameter("insDt", insDt) :
                new ObjectParameter("insDt", typeof(System.DateTime));
    
            var updDtParameter = updDt.HasValue ?
                new ObjectParameter("updDt", updDt) :
                new ObjectParameter("updDt", typeof(System.DateTime));
    
            var actionParameter = action.HasValue ?
                new ObjectParameter("action", action) :
                new ObjectParameter("action", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblSubCategory_Result>("sp_tblSubCategory", subCatIdParameter, catIdParameter, subcatNameParameter, descriptionParameter, isActiveParameter, userIdParameter, insDtParameter, updDtParameter, actionParameter, remark);
        }
    
        public virtual ObjectResult<string> sp_operations(Nullable<int> productId, Nullable<int> catId, Nullable<int> subCatId, Nullable<int> brandId, string productName, string sKU, string aboutProduct, string description, Nullable<int> price, Nullable<int> costPrice, Nullable<int> retailPrice, Nullable<int> salePrice, Nullable<int> action, Nullable<int> userId)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("productId", productId) :
                new ObjectParameter("productId", typeof(int));
    
            var catIdParameter = catId.HasValue ?
                new ObjectParameter("catId", catId) :
                new ObjectParameter("catId", typeof(int));
    
            var subCatIdParameter = subCatId.HasValue ?
                new ObjectParameter("subCatId", subCatId) :
                new ObjectParameter("subCatId", typeof(int));
    
            var brandIdParameter = brandId.HasValue ?
                new ObjectParameter("brandId", brandId) :
                new ObjectParameter("brandId", typeof(int));
    
            var productNameParameter = productName != null ?
                new ObjectParameter("productName", productName) :
                new ObjectParameter("productName", typeof(string));
    
            var sKUParameter = sKU != null ?
                new ObjectParameter("SKU", sKU) :
                new ObjectParameter("SKU", typeof(string));
    
            var aboutProductParameter = aboutProduct != null ?
                new ObjectParameter("aboutProduct", aboutProduct) :
                new ObjectParameter("aboutProduct", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(int));
    
            var costPriceParameter = costPrice.HasValue ?
                new ObjectParameter("costPrice", costPrice) :
                new ObjectParameter("costPrice", typeof(int));
    
            var retailPriceParameter = retailPrice.HasValue ?
                new ObjectParameter("retailPrice", retailPrice) :
                new ObjectParameter("retailPrice", typeof(int));
    
            var salePriceParameter = salePrice.HasValue ?
                new ObjectParameter("salePrice", salePrice) :
                new ObjectParameter("salePrice", typeof(int));
    
            var actionParameter = action.HasValue ?
                new ObjectParameter("action", action) :
                new ObjectParameter("action", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_operations", productIdParameter, catIdParameter, subCatIdParameter, brandIdParameter, productNameParameter, sKUParameter, aboutProductParameter, descriptionParameter, priceParameter, costPriceParameter, retailPriceParameter, salePriceParameter, actionParameter, userIdParameter);
        }
    
        public virtual ObjectResult<sp_tblCategoryMaster_Result> sp_tblCategoryMaster(Nullable<int> cat_id, string cat_name, string description, Nullable<int> p_cat_id, Nullable<int> isActive, Nullable<int> userid, Nullable<System.DateTime> insDt, Nullable<System.DateTime> updDt, Nullable<int> action, ObjectParameter remark)
        {
            var cat_idParameter = cat_id.HasValue ?
                new ObjectParameter("cat_id", cat_id) :
                new ObjectParameter("cat_id", typeof(int));
    
            var cat_nameParameter = cat_name != null ?
                new ObjectParameter("cat_name", cat_name) :
                new ObjectParameter("cat_name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var p_cat_idParameter = p_cat_id.HasValue ?
                new ObjectParameter("p_cat_id", p_cat_id) :
                new ObjectParameter("p_cat_id", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var insDtParameter = insDt.HasValue ?
                new ObjectParameter("insDt", insDt) :
                new ObjectParameter("insDt", typeof(System.DateTime));
    
            var updDtParameter = updDt.HasValue ?
                new ObjectParameter("updDt", updDt) :
                new ObjectParameter("updDt", typeof(System.DateTime));
    
            var actionParameter = action.HasValue ?
                new ObjectParameter("action", action) :
                new ObjectParameter("action", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tblCategoryMaster_Result>("sp_tblCategoryMaster", cat_idParameter, cat_nameParameter, descriptionParameter, p_cat_idParameter, isActiveParameter, useridParameter, insDtParameter, updDtParameter, actionParameter, remark);
        }
    }
}
